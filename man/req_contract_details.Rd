% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/req_contract_details.R
\name{req_contract_details}
\alias{req_contract_details}
\title{Request Contract Details}
\usage{
req_contract_details(contract = NULL, channel = NULL)
}
\arguments{
\item{contract}{Named character vector of contract parameter(s). The name of each element identifies the parameter -- for example, \code{secType}, \code{symbol}, \code{exchange}... -- and each element itself gives the set value (e.g., "STK", "IBM", "SMART"). \cr \cr \strong{The `contract` parameters that may be used with} \code{req_contract_details}() \strong{are}:\cr\code{secId}, \code{tradingClass}, \code{primaryExchange}, \code{conId}, \code{symbol}, \code{secType}, \code{lastTradeDateOrContractMonth}, \code{strike}, \code{right}, \code{multiplier}, \code{exchange}, \code{currency}, \code{localSymbol}, \code{includeExpired}, \code{secIdType}\cr \cr See \link{contract} for detailed information on all \code{contract} parameters.}

\item{channel}{One of the following:

\itemize{
  \item \strong{Not Specified} (Default): Opens a new connection to IB, uses
  it to issue the request and retrieve the response, and closes connection
  behind itself upon completion.
  \item \strong{The Name of a Sock}: Character vector, length 1. The name of
  an open, connected socket in the \link{sock_drawer}; e.g., "master", "tws",
  or "sock_123"
  \item \strong{Numeric Client ID}: Numeric, length 1. The client ID for
  which open orders are to be retrieved; e.g., 0, 874, 123. If a client ID is
  passed, and no socket in the \link{sock_drawer} is connected on that ID,
  then a new socket will be opened on that ID, and closed upon function exit.
  \item \strong{A \code{sockconn} Connection}: An open connection object of
  class "sockconn", connected to the IB API; e.g., \code{sock_drawer$tws}
}}
}
\value{
A \code{CONTRACT_DETAILS} if sync mode; otherwise NULL is returned invisibly
and the query results will be updated in \code{treasury$CONTRACT_DETAILS}
when \link{read_sock_drawer}() is called at a later time.
}
\description{
Fetch a wealth of information about contracts at Interactive Brokers that are
found to match parameters supplied in the \code{contract} argument.
}
\details{
\strong{IB's documentation} describes each column variable that can appear in
the output of \strong{InteractiveTradeR}'s implementation of
\code{req_contract_details}() in the
\href{https://interactivebrokers.github.io/tws-api/classIBApi_1_1ContractDetails-members.html}{ContractDetails
Members} section. A list of the contract parameters that may be passed in via
the \code{contract} object can be found in IB's
\href{https://interactivebrokers.github.io/tws-api/classIBApi_1_1Contract.html}{Contract
Class Reference}.

\strong{Pacing and Large Queries}: \code{req_contract_details}() is able to
send queries that involve the transfer of high amounts of data in cases where
many contracts are found to match the selection criteria. As a consequence,
Interactive Brokers may \strong{pace} requests made by this function by
placing similar or identical requests on hold for one minute, with the amount
of time increasing each time subsequent similar/identical requests are made.

The exact criteria regarding what constitutes a "similar" request, and the
rules governing pacing behavior, are not published. However, by following
three general rules of thumb, pacing should not be a problem when using
\code{req_contract_details}() in InteractiveTradeR:

\itemize{
  \item \strong{In SYNC mode (} \code{channel = NULL}) \strong{, bump up the
  timeout parameter for large queries with \link{sync_timeout}()}. If a large
  number of contracts are found to match the parameters in \code{contract},
  then the function might return an error if called with the default timeout
  because it needs bit more time than the default 5 seconds in order to
  complete. Try using \code{sync_timeout(10)} or \code{sync_timeout(15)}.
  \item \strong{In Shiny apps or scripts whose execution can't/shouldn't be
  held up while \code{req_contract_details}() executes, use} \strong{Async
  Mode}. Have your script or app look for the updated data in
  \code{treasury$CONTRACT_DETAILS} at a later time.
  \item \strong{Subsequent calls to \code{req_contract_details}() will
  overwrite the} \code{CONTRACT_DETAILS} \strong{treasury object}. In other
  words, there is at most one \code{CONTRACT_DETAILS} object in the treasury
  at any given time.
  \item \strong{Using \code{conId} Only}: If the object passed in as
  \code{contract} has length = 1, then \code{req_contract_details}() will
  assume that \code{contract} contains a \code{conId}, which is sufficient to
  specify a unique contract. This shortcut can help speed up usage.
}
}
\section{\code{CONTRACT_DETAILS} Treasury Object}{

The \code{CONTRACT_DETAILS} object is a \link[tibble]{tibble} in which each
row represents a contract found to match the supplied parameters. The columns
of \code{CONTRACT_DETAILS} are described in the
\href{https://interactivebrokers.github.io/tws-api/classIBApi_1_1ContractDetails.html}{Contract
Details Class Reference} page in IB's online documentation \strong{with one
minor difference}: in \strong{InteractiveTradeR}, the parameters
\code{validExchanges} and \code{marketRuleIds} are grouped together in the
column \code{exchange_info} to make it easy to read which market rule applies
to which exchange.
}

\examples{
#### Example: supplying more parameters gives more specific results.
#### Goal: We would like to retrieve the contract details of IBM common stock,
####       which, at IB, happens to have conId = 8314.

# The fastest and simplest way to get IBM's contract details is by conId only:
contract_details <- req_contract_details(8314)
contract_details

# You can select, manipulate, and view the fetched details:
contract_details$exchange_info # View the exchange info
contract_details$orderTypes    # See what order types are available
contract_details$conId         # Check the conId

# ... and so on.

# You can also use glimpse() to print the information in what may be an
# easier-to-read format:
dplyr::glimpse(contract_details)

# But what if you didn't already know IBM's conId?

# 2) You could try to get IBM's contract details by symbol only, but because
# there are many securities across many exchanges that have the symbol "IBM"
# this query won't work -- IB responds by asking for more info.
contract_details_1 <- req_contract_details(contract = c(symbol = "IBM"))

# 3) So, try providing a valid security type:
contract_details_2 <- req_contract_details(
  contract = c(symbol = "IBM", secType  = "STK")
)
contract_details_2

# This call will work, but returns ALL of the contracts whose symbol is "IBM".
# Only one of these is the contract of interest, so this doesn't help much.

# 4) Narrow things down by specifying a currency:
contract_details_3 <- req_contract_details(
  contract = c(
    symbol   = "IBM",
    secType  = "STK",
    currency = "USD"
  )
)
contract_details_3

# This helped somewhat, but still have a large number of matching contracts.

# 5) Specify an exchange:
contract_details_4 <- req_contract_details(
  contract = c(
    symbol   = "IBM",
    secType  = "STK",
    currency = "USD",
    exchange = "SMART"
  )
)
contract_details_4

# Success! For IBM, these four exchanges are enough to specify the contract.

# Bond details return slightly different parameters. See the "ContractDetails"
# documentation on IB's website at the link provided in the "Value" section.
broadcom_bond <- req_contract_details(359401413)
broadcom_bond
}
\seealso{
Other asset info: 
\code{\link{req_matching_symbols}()},
\code{\link{req_sec_def_opt_params}()}
}
\concept{asset info}
